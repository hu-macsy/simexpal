name: Run Python Test

on: [push, pull_request]

jobs:
  build-and-test-ubuntu:
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install prerequisites
        shell: bash -e {0}
        run: |
          ansible-galaxy role install https://github.com/galaxyproject/ansible-slurm/archive/1.0.1.tar.gz
          sudo apt-get update
          pip install ninja
      - name: Setup ansible playbook for slurm
        uses: 1arp/create-a-file-action@0.2
        with:
          file: slurm-playbook.yml
          content: |
            - name: Slurm all in One
              hosts: localhost
              roles:
                - role: 1.0.1
                  become: true
              vars:
                  slurm_upgrade: true
                  slurm_roles: ['controller', 'exec']
                  slurm_config_dir: /etc/slurm
                  slurm_config:
                      ClusterName: cluster
                      SlurmctldLogFile: /var/log/slurm/slurmctld.log
                      SlurmctldPidFile: /run/slurmctld.pid
                      SlurmdLogFile: /var/log/slurm/slurmd.log
                      SlurmdPidFile: /run/slurmd.pid
                      SlurmdSpoolDir: /tmp/slurmd # the default /var/lib/slurm/slurmd does not work because of noexec mounting in github actions
                      StateSaveLocation: /var/lib/slurm/slurmctld
                      SelectType: select/cons_tres
                  slurm_create_user: yes
                  slurm_nodes:
                      - name: localhost
                        State: UNKNOWN
                        Sockets: 1
                        CoresPerSocket: 2
                        RealMemory: 2000
                  slurm_user:
                      comment: "Slurm Workload Manager"
                      gid: 1002
                      group: slurm
                      home: "/var/lib/slurm"
                      name: slurm
                      shell: "/bin/bash"
                      uid: 1002
      - name: Setup slurm
        shell: bash -e {0}
        run: |
          mkdir -p /tmp/1002-runtime # work around podman issue (https://github.com/containers/podman/issues/13338)
          echo XDG_RUNTIME_DIR=/tmp/1002-runtime >> $GITHUB_ENV
          ansible-playbook slurm-playbook.yml || (journalctl -xe && exit 1)
      - name: Install simexpal
        run: |
          pip install .
      - name: Run tests
        run: |
          pip install pytest
          pytest

  build-and-test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python latest
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install libomp (macOS)
        run: |
          brew install libomp
      - name: Install ninja
        run: |
          pip install ninja
      - name: Install simexpal
        run: |
          pip install .
      - name: Run tests
        run: |
          pip install pytest
          pytest -k "not slurm"

  # This job checks whether the current workflow is triggered by a new tag with the following form: INT.INT or INT.INT.INT (for example: 1.0, 1.0.1, ...)
  # The result is saved in a variable and used as a conditional variable when uploading packages.
  check-release-tag:
    name: "Check for new release"
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.do-check.outputs.is-release }}
    steps:
      - name: Check release tag ${{ github.ref }}
        id: do-check
        run: |
          if [[ ${{ github.ref }} =~ ^refs\/tags\/v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "::set-output name=is-release::true"
          else
            echo "::set-output name=is-release::false"
          fi

  build-wheel-and-upload:
    if: needs.check-release-tag.outputs.is-release == 'true' && github.repository == 'hu-macsy/simexpal'
    name: 'PyPi release upload'
    runs-on: ubuntu-20.04
    needs: [build-and-test-ubuntu, check-release-tag]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Create wheel
        run: |
          pip install wheel
          python3 -m pip wheel ./ --wheel-dir=./dist --no-deps
      - name: Create source package
        run: |
          python3 setup.py sdist
      - name: Upload to PyPI
        run: |
          pip install twine 
          python3 -m twine upload --verbose --skip-existing ./dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}
